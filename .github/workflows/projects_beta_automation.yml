name: Projects Beta Automation

on:
  issues:
    types:
      - opened

jobs:
  add_new_issues_to_projects_beta:
    runs-on: ubuntu-latest

    steps:
      - name: Get project and status field IDs
        env:
          GITHUB_TOKEN: ${{ secrets.PROJECTS_BETA_AUTOMATION }}
        run: |
          gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='{
            organization(login: "redwoodjs") {
              projectNext(number: 4) {
                id
                fields(first:20) {
                  nodes {
                    id
                    name
                  }
                }
              }
            }
          }' > project_data.json

          echo 'PROJECT_ID='$(jq '.data.organization.projectNext.id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name=="Status") | .id' project_data.json) >> $GITHUB_ENV

      - name: Add issue to project
        if: github.event_name == 'issues'
        env:
          GITHUB_TOKEN: ${{ secrets.PROJECTS_BETA_AUTOMATION }}
          CONTENT_ID: ${{ github.event.issue.node_id }}
        run: |
          item_id="$(gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='
            mutation($project: ID!, $contentId: ID!) {
              addProjectNextItem(input: { projectId: $project, contentId: $contentId }) {
                projectNextItem {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f contentId=$CONTENT_ID --jq '.data.addProjectNextItem.projectNextItem.id')"
          
          echo 'ITEM_ID='$item_id >> $GITHUB_ENV

      - name: Add pull request to project
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.PROJECTS_BETA_AUTOMATION }}
          CONTENT_ID: ${{ github.event.pull_request.node_id }}
        run: |
          item_id="$(gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='
            mutation($project: ID!, $contentId: ID!) {
              addProjectNextItem(input: { projectId: $project, contentId: $contentId }) {
                projectNextItem {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f contentId=$CONTENT_ID --jq '.data.addProjectNextItem.projectNextItem.id')"
          
          echo 'ITEM_ID='$item_id >> $GITHUB_ENV
          
      - name: Set status to "New issues"
        env:
          GITHUB_TOKEN: ${{ secrets.PROJECTS_BETA_AUTOMATION }}
        run: |
          gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='
            mutation ($projectId: ID!, $itemId: ID!, $statusFieldId: ID!) {
              updateProjectNextItemField(
                input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $statusFieldId
                  value: "New issues"
                }
              ) {
                projectNextItem {
                  id
                }
              }
            }' -f projectId=$PROJECT_ID -f itemId=$ITEM_ID -f statusFieldId=$STATUS_FIELD_ID --silent
